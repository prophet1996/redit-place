{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pixels","firebase","initializeApp","apiKey","authDomain","projectId","firestore","collection","onSnapshot","coll","setState","docs","map","doc","data","e","_this2","coordinates","x","Math","floor","clientX","y","clientY","selectedCoordinate","color","_this3","add","objectSpread","hex","then","docRef","catch","error","concat","react_default","a","createElement","className","id","onClick","handlePixelClick","bind","style","position","height","width","pixel","left","top","backgroundColor","lib","onChangeComplete","handlePickedColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAsGeA,cAhGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,IAKVC,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,2BACZC,UAAW,gBAEbJ,IACEK,YACAC,WAAW,UACXC,WAAW,SAACC,GACVjB,EAAKkB,SAAS,CAAEV,OAAQS,EAAKE,KAAKC,IAAI,SAACC,GAAD,OAASA,EAAIC,aAjBtCtB,gFAqBFuB,GAAG,IAAAC,EAAArB,KAEZsB,EAAc,CAClBC,EAAGC,KAAKC,MAAML,EAAEM,QA1BH,IA2BbC,EAAGH,KAAKC,MAAML,EAAEQ,QA3BH,KA6Bf5B,KAAKe,SAAS,CAAEc,mBAAoBP,IACpChB,IACEK,YACAC,WAAW,UACXC,WAAW,SAACC,GACVO,EAAKN,SAAS,CAAEV,OAAQS,EAAKE,KAAKC,IAAI,SAACC,GAAD,OAASA,EAAIC,uDAKvCW,GAAO,IAAAC,EAAA/B,KAGvBM,IAASK,YAAYC,WAAW,UAAUoB,IAA1ClC,OAAAmC,EAAA,EAAAnC,CAAA,GAEKE,KAAKI,MAAMyB,mBAFhB,CAEoCC,MAAOA,EAAMI,OAG9CC,KAAK,SAAUC,MAKfC,MAAM,SAAUC,MAGnBtC,KAAKe,SAAS,CACZV,OAAQL,KAAKI,MAAMC,OAAOkC,OAAlBzC,OAAAmC,EAAA,EAAAnC,CAAA,GACHE,KAAKI,MAAMyB,mBADR,CAC4BC,MAAOA,EAAMI,QAEhD,WAAQH,EAAKhB,SAAS,CAAEc,mBAAoB,0CAM/C,OACEW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,SACNC,QAAS7C,KAAK8C,iBAAiBC,KAAK/C,MACpCgD,MAAO,CAAEC,SAAU,WAAYC,OAAQ,QAASC,MAAO,UACtDnD,KAAKI,MAAMC,OAAOY,IAAI,SAACmC,GACtB,OAAQZ,EAAAC,EAAAC,cAAA,OACNM,MAAO,CACLK,KAzEG,GAyEGD,EAAM7B,EACZ+B,IA1EG,GA0EEF,EAAMzB,EACXwB,MA3EG,GA4EHD,OA5EG,GA6EHK,gBAAiBH,EAAMtB,MACvBmB,SAAU,iBAOjBjD,KAAKI,MAAMyB,oBAAsBW,EAAAC,EAAAC,cAAA,OAAKM,MAAO,CAC5CC,SAAU,WACVI,KAvFS,IAuFFrD,KAAKI,MAAMyB,mBAAmBN,EAAI,GACzC+B,IAxFS,IAwFHtD,KAAKI,MAAMyB,mBAAmBF,EAAI,KAExCa,EAAAC,EAAAC,cAACc,EAAA,aAAD,CAAcC,iBAAkBzD,KAAK0D,kBAAkBX,KAAK/C,iBAzFpD2D,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.83788cdc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { CirclePicker } from 'react-color';\nimport './App.css';\nimport firebase from \"firebase\"\nconst PIXEL_SIZE = 10;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pixels: [\n\n      ]\n\n    }\n    firebase.initializeApp({\n      apiKey: 'AIzaSyB0Krqd5-hrc6qaiSHTakENr6bsempLhH0',\n      authDomain: 'redit-place.firebase.com',\n      projectId: 'redit-place'\n    });\n    firebase.\n      firestore().\n      collection(\"pixels\").\n      onSnapshot((coll) => {\n        this.setState({ pixels: coll.docs.map((doc) => doc.data()) })\n\n      })\n  }\n  handlePixelClick(e) {\n    // this.setState()\n    const coordinates = {\n      x: Math.floor(e.clientX / PIXEL_SIZE),\n      y: Math.floor(e.clientY / PIXEL_SIZE),\n    }\n    this.setState({ selectedCoordinate: coordinates })\n    firebase.\n      firestore().\n      collection(\"pixels\").\n      onSnapshot((coll) => {\n        this.setState({ pixels: coll.docs.map((doc) => doc.data()) })\n\n      })\n\n  }\n  handlePickedColor(color) {\n\n\n    firebase.firestore().collection(\"pixels\").add({\n\n      ...this.state.selectedCoordinate, color: color.hex\n\n    })\n      .then(function (docRef) {\n\n\n\n      })\n      .catch(function (error) {\n\n      });\n    this.setState({\n      pixels: this.state.pixels.concat({\n        ...this.state.selectedCoordinate, color: color.hex\n      })\n    }, () => { this.setState({ selectedCoordinate: null }) })\n\n\n  }\n  render() {\n\n    return (\n      <div className=\"App\">\n        <div id=\"pixels\"\n          onClick={this.handlePixelClick.bind(this)}\n          style={{ position: \"relative\", height: \"100vh\", width: \"100vw\" }}>\n          {this.state.pixels.map((pixel) => {\n            return (<div\n              style={{\n                left: pixel.x * PIXEL_SIZE,\n                top: pixel.y * PIXEL_SIZE,\n                width: PIXEL_SIZE,\n                height: PIXEL_SIZE,\n                backgroundColor: pixel.color,\n                position: \"absolute\",\n              }}\n            >\n\n            </div>)\n          })}\n        </div>\n        {this.state.selectedCoordinate && <div style={{\n          position: \"absolute\",\n          left: (this.state.selectedCoordinate.x + 1) * PIXEL_SIZE,\n          top: (this.state.selectedCoordinate.y + 1) * PIXEL_SIZE,\n        }}>\n          <CirclePicker onChangeComplete={this.handlePickedColor.bind(this)} />\n        </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}